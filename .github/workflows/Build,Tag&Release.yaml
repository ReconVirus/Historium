name: Build, Tag and Release

on:
    push:
        branches:
            - Main

env:
    ARTIFACT_PATH: ./dist/
    ZIP_FILE_NAME: release

jobs:
    build:
        name: Build release artifacts
        runs-on: windows-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                node-version: '18'
                cache: 'npm'
            - run: |
                npm ci
                npm run build
                cp ./manifest.json ./dist/
              shell: pwsh
            - name: Archive production artifacts
              run: |
                cd ${{ env.ARTIFACT_PATH }}
                zip -r ../${{ env.ZIP_FILE_NAME }}.zip *
              shell: bash
            - uses: actions/upload-artifact@v3
              with:
                name: Release
                path: ./${{ env.ZIP_FILE_NAME }}.zip

    tag_and_release:
        needs: build
        runs-on: windows-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                node-version: '18'
                cache: 'npm'
            - uses: actions/download-artifact@v3
              with:
                name: Release
                path: ./
            - id: set_tag_and_push
              shell: pwsh
              run: |
                $VERSION = (Get-Content package.json | ConvertFrom-Json).version -split '\.'
                $NEW_TAG = "v$($VERSION[0]).$(1 + [int]$VERSION[1]).0"
                echo "latest_tag=$NEW_TAG" >> $GITHUB_ENV

                git remote set-url origin "https://x-access-token:${{ secrets.MASTER }}@github.com/ReconVirus/Historium.git"
                git tag $NEW_TAG
                git push origin $NEW_TAG

            - id: create_release_and_upload_asset
              uses: actions/create-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.MASTER }}
              with:
                tag_name: ${{ env.latest_tag }}
                release_name: Release ${{ env.latest_tag }}
                body_path: CHANGELOG.md
                draft: false
                prerelease: false

            - name: Upload Release Asset and Individual Files as Assets
              run: |
                  # Upload the zip file as a release asset.
                  curl \
                    --request POST \
                    --header "Authorization: token ${{ secrets.MASTER }}" \
                    --header "Content-Type: $(file -b --mime-type ${ZIP_FILE_NAME}.zip)" \
                    --data-binary "@${ZIP_FILE_NAME}.zip" \
                    "${{ steps.create_release_and_upload_asset.outputs.upload_url }}/assets?name=${ZIP_FILE_NAME}.zip"

                  # Unzip the file.
                  unzip ${ZIP_FILE_NAME}.zip -d dist/

                  # Upload individual files as release assets.
                  for filename in dist/*; do 
                      curl \
                        --request POST \
                        --header "Authorization: token ${{ secrets.MASTER }}" \
                        --header "Content-Type: $(file -b --mime-type $filename)" \
                        --data-binary "@$filename" \
                        "${{ steps.create_release_and_upload_asset.outputs.upload_url }}/assets?name=$(basename $filename)"
                  done;
              shell: bash
